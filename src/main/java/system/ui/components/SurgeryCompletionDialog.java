/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package system.ui.components;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import system.enums.PaymentMethod;
import system.model.Appointment;
import system.model.BillableItem;
import system.model.Claim;
import system.model.User;
import system.service.AppointmentService;
import system.service.AuthenticationService;
import system.service.BillingService;
import system.service.ClaimService;

/**
 *
 * @author User
 */
public class SurgeryCompletionDialog extends javax.swing.JDialog {

    private final Appointment appointment;
    private final Runnable refreshCallback;
    private final AppointmentService appointmentService;
    private final ClaimService claimService;
    private final DefaultTableModel tableModel;
    
    // This list now holds temporary items not yet linked to a claim
    private final List<BillableItem> tempBillableItems = new ArrayList<>();
    private double currentTotal = 0.0;

   public SurgeryCompletionDialog(java.awt.Frame parent, boolean modal, Appointment appointment, Runnable refreshCallback) {
        super(parent, modal);
        initComponents();
        this.appointment = appointment;
        this.refreshCallback = refreshCallback;
        this.appointmentService = new AppointmentService();
        this.claimService = new ClaimService();

        setTitle("Finalize Charges for Surgery #" + appointment.getId());
        setLocationRelativeTo(parent);

        tableModel = new DefaultTableModel(new Object[]{"Item Description", "Cost"}, 0);
        jTable1.setModel(tableModel);
        
        // You can add a main title label to your designer and set it here
        // titleLabel.setText("Finalize Charges for " + appointment.getPatient().getName());
        updateTotalLabel();
    }

 private void updateTotalLabel() {
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance();
        jLabel2.setText(currencyFormat.format(currentTotal));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundedTextField1 = new system.ui.components.RoundedTextField();
        roundedTextField2 = new system.ui.components.RoundedTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        roundedTextField1.setText("roundedTextField1");

        roundedTextField2.setText("roundedTextField2");

        jButton1.setText("Add Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Item Description", "Cost"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Total Cost");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("jLabel2");

        jButton2.setText("Finalize Charges");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(roundedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(roundedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roundedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(19, 19, 19))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String description = roundedTextField1.getText().trim();
        String costStr = roundedTextField2.getText().trim();
        double cost;
        try {
            cost = Double.parseDouble(costStr);
            if (description.isEmpty() || cost <= 0) {
                JOptionPane.showMessageDialog(this, "Description and a positive Cost are required.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for the cost.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Create a temporary BillableItem, not yet linked to a claim
        BillableItem newItem = new BillableItem(null, description, cost);
        tempBillableItems.add(newItem);

        tableModel.addRow(new Object[]{description, NumberFormat.getCurrencyInstance().format(cost)});
        currentTotal += cost;
        updateTotalLabel();

        roundedTextField1.setText("");
        roundedTextField2.setText("0.00");
        roundedTextField1.requestFocusInWindow();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

  if (tempBillableItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please add at least one billable item.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] options = {"CASH", "CARD", "INSURANCE"};
        String message = "The total bill is " + jLabel2.getText() + ".\nPlease select the billing method.";
        int choice = JOptionPane.showOptionDialog(this, message, "Select Billing Method", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (choice == JOptionPane.CLOSED_OPTION) return;

        PaymentMethod selectedMethod = PaymentMethod.valueOf(options[choice]);
        User confirmingUser = AuthenticationService.getInstance().getLoggedInUser();
        if (confirmingUser == null) {
            JOptionPane.showMessageDialog(this, "Session error. Please log in again.", "Authentication Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // --- THE CORRECTED WORKFLOW ---

        // 1. First, mark the appointment as COMPLETED in the database.
        boolean appointmentUpdated = appointmentService.updatePaymentMethodAndStatus(appointment.getId(), selectedMethod, "COMPLETED", confirmingUser);
        if (!appointmentUpdated) {
            JOptionPane.showMessageDialog(this, "Failed to update the appointment status.", "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Also update our local object to reflect the change
        appointment.setStatus("COMPLETED");

        // 2. NOW that the appointment is officially completed, create the final Claim object.
        // This will now pass the validation check in the Claim constructor.
        Claim finalClaim = new Claim(appointment, this.currentTotal, selectedMethod);
        
        // 3. Link all the temporary billable items to this new, valid claim.
        for (BillableItem item : tempBillableItems) {
            finalClaim.addItem(item);
        }

        // 4. Save the completed claim with all its items in a single transaction.
        Claim savedClaim = claimService.createClaimWithItems(finalClaim);
        
        // 5. Provide final feedback.
        if (savedClaim != null) {
            String successMessage = "Charges saved and surgery marked as COMPLETED.";
            if (selectedMethod == PaymentMethod.INSURANCE) {
                successMessage += "\nThe appointment is now ready for an insurance claim to be processed.";
            }
            JOptionPane.showMessageDialog(this, successMessage, "Success", JOptionPane.INFORMATION_MESSAGE);
            if (refreshCallback != null) refreshCallback.run();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save the final claim details.", "Database Error", JOptionPane.ERROR_MESSAGE);
            // At this point, a real system would need logic to handle this inconsistency.
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private system.ui.components.RoundedTextField roundedTextField1;
    private system.ui.components.RoundedTextField roundedTextField2;
    // End of variables declaration//GEN-END:variables
}
